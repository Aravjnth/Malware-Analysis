import os
import hashlib
import pefile
import yara
import json

class MalwareAnalysisTool:
    def __init__(self, sample_path):
        self.sample_path = sample_path
        self.sample_name = os.path.basename(sample_path)
        self.analysis_results = {}

    def calculate_hashes(self):
        with open(self.sample_path, 'rb') as f:
            file_data = f.read()
            self.analysis_results['md5'] = hashlib.md5(file_data).hexdigest()
            self.analysis_results['sha1'] = hashlib.sha1(file_data).hexdigest()
            self.analysis_results['sha256'] = hashlib.sha256(file_data).hexdigest()

    def analyze_pe_file(self):
        try:
            pe = pefile.PE(self.sample_path)
            self.analysis_results['pe_file'] = {
                'entry_point': hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint),
                'image_base': hex(pe.OPTIONAL_HEADER.ImageBase),
                'section_names': [s.Name.decode('utf-8') for s in pe.sections]
            }
        except pefile.PEFormatError:
            self.analysis_results['pe_file'] = 'Error parsing PE file'

    def scan_with_yara(self, rules_path):
        rules = yara.compile(file=rules_path)
        matches = rules.match(self.sample_path)
        self.analysis_results['yara_matches'] = [match.rule for match in matches]

    def analyze(self, rules_path):
        self.calculate_hashes()
        self.analyze_pe_file()
        self.scan_with_yara(rules_path)
        return self.analysis_results

if __name__ == "__main__":
    sample_path = 'path/to/malware/sample.exe'
    rules_path = 'path/to/yara/rules.yara'
    tool = MalwareAnalysisTool(sample_path)
    results = tool.analyze(rules_path)
    print(json.dumps(results, indent=4))